 cmake_minimum_required(VERSION 3.16.0)

set(ARM_ARCHITECTURE "v7EM")
set(ARM_CORE_TYPE "Cortex-M4")
set(ARM_ENDIAN "Little")
set(ARM_FP_ABI "Hard")
set(ARM_FPU_TYPE "FPv4-SP-D16")
set(ARM_LINKER_HEAP_SIZE "8192")
set(ARM_LINKER_PROCESS_STACK_SIZE "0")
set(ARM_LINKER_STACK_SIZE "8192")
set(ARM_LINKER_TREAT_WARNINGS_AS_ERRORS "No")
set(ARM_SIMULATOR_MEMORY_SIMULATION_PARAMETER "RWX 00000000,00100000,FFFFFFFF;RWX 20000000,00010000,CDCDCDCD")
set(ARM_TARGET_DEVICE_NAME "nRF52840_xxAA")
set(ARM_TARGET_INTERFACE_TYPE "SWD")
set(DOWNLOAD_NRF_SDK OFF)
set(NRF_SDK_LIBS utils log bsp)

if(WIN32)
    message("Configuring for Windows")
    set(SEGGER_ROOT_DIR "C:/Program\ Files/SEGGER/SEGGER\ Embedded\ Studio\ 8.10d")
elseif(UNIX AND NOT APPLE)
    message("Configuring for NIX/BSD")
else()
    message("Configuring for Apple")
    set(SEGGER_ROOT_DIR "/Applications/SEGGER/SEGGER\ Embedded\ Studio\ 8.10d")
endif()

#Search include paths recursively
MACRO(HEADER_DIRECTORIES search_path return_list)
    FILE(GLOB_RECURSE new_list ${search_path}/*.h)
    SET(dir_list "")
    FOREACH(file_path ${new_list})
        GET_FILENAME_COMPONENT(dir_path ${file_path} PATH)
        #TODO: Add flags to enable or disable softdevice
        if(dir_path MATCHES "nrf_soc_nosd")
            message("Found nrf_soc_nosd - not adding to include path")
        #elseif(dir_path MATCHES "example")
        #    message("Found example dir - not adding to include path")
        elseif(dir_path MATCHES "external_tools")
            message("Found external_tools dir - not adding to include path")
        elseif(dir_path MATCHES "802")
            message("Found internal APIs dir - not adding to include path")
        elseif(file_path MATCHES "sdk_config.h")
            message("Not including sdk_config paths")
        else()
            SET(dir_list ${dir_list} ${dir_path})
        endif()
    ENDFOREACH()
    LIST(REMOVE_DUPLICATES dir_list)
    SET(${return_list} ${dir_list})
ENDMACRO()

MACRO(LIBRARY_SRC_FILES search_path return_list)
    FILE(GLOB_RECURSE new_list ${search_path}/*.c)
    SET(dir_list "")
    FOREACH(file_path ${new_list})
        message("=========================================")
        message("Searchig for library source files: ${NRF_SDK_LIBS}")
        FOREACH(sdk_lib ${NRF_SDK_LIBS})
            if(dir_path MATCHES sdk_lib)
                message("Including SDK Lib: ${sdk_lib}")
            endif()
        ENDFOREACH()
    ENDFOREACH()
LIST(REMOVE_DUPLICATES dir_list)
SET(${return_list} ${dir_list})
ENDMACRO()

function(configure_nrf_project PROJECT_NAME CONFIGURATION)
    if((NOT NRF_SDK_ROOT_DIR) AND (NOT DOWNLOAD_NRF_SDK) )
        message("*****************************************")
        message("=========================================")
        message( SEND_ERROR "NRF_SDK_ROOT_DIR not defined" )
        message("=========================================")
        message("*****************************************")
    elseif(DOWNLOAD_NRF_SDK)
        message("*****************************************")
        message("=========================================")
        message("Downloading NRF SDK")
        if(NOT EXISTS ${CMAKE_BINARY_DIR}/NRF_SDK_17.zip)
            file(
                DOWNLOAD 
                "https://nsscprodmedia.blob.core.windows.net/prod/software-and-other-downloads/sdks/nrf5/binaries/nrf5_sdk_17.1.0_ddde560.zip"
                ${CMAKE_BINARY_DIR}/NRF_SDK_17.zip
            )
            file(
                ARCHIVE_EXTRACT 
                INPUT ${CMAKE_BINARY_DIR}/NRF_SDK_17.zip 
                DESTINATION ${CMAKE_BINARY_DIR}
            )
        else()
            message("*****************************************")
            message("=========================================")
            message("SDK already downloaded. Skipping..")
        endif()
        set(NRF_SDK_ROOT_DIR ${CMAKE_BINARY_DIR}/nrf5_sdk_17.1.0_ddde560)
    endif()
    if(EXISTS "${NRF_SDK_ROOT_DIR}/flash_placement.xml")
        message(STATUS "flash_placement.xml found in ${NRF_SDK_ROOT_DIR}")
    else()
        message("*****************************************")
        message("=========================================")
        message("flash_placement.xml not found in ${NRF_SDK_ROOT_DIR}")
    endif()

    if(NOT NRF_PROJ_SRCS)
        message("*****************************************")
        message("=========================================")
        message( SEND_ERROR "NRF_PROJ_SRCS not defined: e.g set(NRF_PROJ_SRCS main.cpp config.c)" )
    endif()
    if(NOT NRF_PROJ_INCL)
        message("*****************************************")
        message("=========================================")
        message( SEND_ERROR "NRF_PROJ_INCL not defined: e.g set(NRF_PROJ_SRCS setup.h config.h)" )
    endif()

    set(INTERNAL_NRF_PROJ_FILES)

    foreach(file IN LISTS NRF_PROJ_SRCS)
        list(APPEND INTERNAL_NRF_PROJ_FILES <file file_name="${CMAKE_SOURCE_DIR}/${file}" />\n\t\t\t )
    endforeach()
    foreach(file IN LISTS NRF_PROJ_INCL)
        list(APPEND INTERNAL_NRF_PROJ_FILES <file file_name="${CMAKE_SOURCE_DIR}/${file}" />\n\t\t\t )
    endforeach()
    list(JOIN INTERNAL_NRF_PROJ_FILES " " INTERNAL_NRF_PROJ_FILES)

    set(NRF_SDK_INC_PATHS)
    HEADER_DIRECTORIES("${NRF_SDK_ROOT_DIR}/components/" NRF_SDK_INC_PATHS)
    set(NRF_SDK_INC_PATHS_2)
    HEADER_DIRECTORIES("${NRF_SDK_ROOT_DIR}/modules/" NRF_SDK_INC_PATHS_2)
    set(NRF_SDK_INC_PATHS_3)
    HEADER_DIRECTORIES("${NRF_SDK_ROOT_DIR}/external/" NRF_SDK_INC_PATHS_3)
    set(LOCAL_INC_DIR)
    HEADER_DIRECTORIES("${CMAKE_SOURCE_DIR}" LOCAL_INC_DIR)

    set(SDK_LIB_LIST)
    LIBRARY_SRC_FILES("${CMAKE_SOURCE_DIR}" SDK_LIB_LIST)

    set(SDK_INCL_DIR)
    foreach(inc_dir ${NRF_SDK_INC_PATHS})
        if(IS_DIRECTORY ${inc_dir})
            list(APPEND SDK_INCL_DIR ${inc_dir})
        endif()
    endforeach()
    foreach(inc_dir ${NRF_SDK_INC_PATHS_2})
        if(IS_DIRECTORY ${inc_dir})
            list(APPEND SDK_INCL_DIR ${inc_dir})
        endif()
    endforeach()
    foreach(inc_dir ${NRF_SDK_INC_PATHS_3})
        if(IS_DIRECTORY ${inc_dir})
            list(APPEND SDK_INCL_DIR ${inc_dir})
        endif()
    endforeach()
    foreach(inc_dir ${LOCAL_INC_DIR})
        if(IS_DIRECTORY ${inc_dir})
            list(APPEND SDK_INCL_DIR ${inc_dir})
        endif()
    endforeach()
    list(REMOVE_DUPLICATES SDK_INCL_DIR)

    set(VSCODE_BROWSE_PATHS)
    foreach(inc_dir ${SDK_INCL_DIR})
        list(APPEND VSCODE_BROWSE_PATHS  \"${inc_dir}\")
    endforeach()
    
    list(JOIN SDK_INCL_DIR ";" SDK_INCL_DIR)
    list(JOIN VSCODE_BROWSE_PATHS ",\n\t\t\t\t\t" VSCODE_BROWSE_PATHS)
    

    set(TEMPLATE_PROJECT_FILE "${CMAKE_CURRENT_SOURCE_DIR}/cmake/template.emProject.in")
    set(TEMPLATE_SESSION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/cmake/template.emSession.in")
    set(TEMPLATE_SDK_CONFIG_FILE "${CMAKE_CURRENT_SOURCE_DIR}/cmake/sdk_config.h.in")
    set(TEMPLATE_C_CPP_PROPERTIES "${CMAKE_CURRENT_SOURCE_DIR}/cmake/c_cpp_properties.json.in")
    set(TEMPLATE_COMPILE_COMMANDS "${CMAKE_CURRENT_SOURCE_DIR}/cmake/compile_commands.json.in")
    set(TEMPLATE_FLASH_PLACEMENTS "${CMAKE_CURRENT_SOURCE_DIR}/cmake/flash_placement.xml.in")

    set(OUTPUT_PROJECT_FILE "${CMAKE_BINARY_DIR}/${PROJECT_NAME}.emProject")
    set(OUTPUT_SESSION_FILE "${CMAKE_BINARY_DIR}/${PROJECT_NAME}.emSession")
    set(OUTPUT_SDK_CONFIG_FILE "${CMAKE_BINARY_DIR}/sdk_config.h")
    set(OUTPUT_C_CPP_PROPERTIES "${CMAKE_SOURCE_DIR}/.vscode/c_cpp_properties.json")
    set(OUTPUT_COMPILE_COMMANDS "${CMAKE_SOURCE_DIR}/.vscode/compile_commands.json")
    set(OUTPUT_MAIN_C_FILE "${CMAKE_CURRENT_SOURCE_DIR}/src/main.c")
    set(OUTPUT_FLASH_PLACEMENTS "${CMAKE_BINARY_DIR}/flash_placement.xml")

    if(NOT EXISTS ${OUTPUT_PROJECT_FILE})
        configure_file(${TEMPLATE_PROJECT_FILE} ${OUTPUT_PROJECT_FILE} @ONLY)
        configure_file(${TEMPLATE_SESSION_FILE} ${OUTPUT_SESSION_FILE} @ONLY)
    endif()
    if(NOT EXISTS ${OUTPUT_SDK_CONFIG_FILE})
        configure_file(${TEMPLATE_SDK_CONFIG_FILE} ${OUTPUT_SDK_CONFIG_FILE} @ONLY)
    endif()
    if(NOT EXISTS ${OUTPUT_FLASH_PLACEMENTS})
        configure_file(${TEMPLATE_FLASH_PLACEMENTS} ${OUTPUT_FLASH_PLACEMENTS} @ONLY)
    endif()
    configure_file(${TEMPLATE_C_CPP_PROPERTIES} ${OUTPUT_C_CPP_PROPERTIES} @ONLY)
    configure_file(${TEMPLATE_COMPILE_COMMANDS} ${OUTPUT_COMPILE_COMMANDS} @ONLY)
    file(MAKE_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/src")
    file(MAKE_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/include")

    execute_process(COMMAND "${SEGGER_ROOT_DIR}/bin/emBuild -verbose ${OUTPUT_PROJECT_FILE}")
endfunction()